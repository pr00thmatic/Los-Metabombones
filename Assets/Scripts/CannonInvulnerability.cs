using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class CannonInvulnerability : MonoBehaviour {
  public event System.Action onDestroy;

  public CannonInvulnerability dependency;
  public bool decreasing = false;
  public float time = 15;
  public GameObject vulnerability;
  public bool destroyed = false;
  public GameObject invulnerabilityIndicator;
  public TextMeshPro text;
  public Sprite shieldNoText;

  void Start () {
    if (dependency) {
      dependency.onDestroy += EventuallyUnshield;
    } else {
      EventuallyUnshield();
    }
  }

  void Update () {
    if (!decreasing) return;
    time -= Time.deltaTime;
    text.text = Mathf.Round(time) + "";
    if (time <= 0) {
      invulnerabilityIndicator.gameObject.SetActive(false);
      vulnerability.SetActive(true);
    }
  }

  void OnTriggerEnter (Collider other) {
    if (destroyed) return;
    if (other.gameObject.tag == "Ball") {
      destroyed = true;
      GetComponent<Cannon>().timeToShoot *= 0.6f;
      onDestroy?.Invoke();
    }
  }

  public void EventuallyUnshield () {
    invulnerabilityIndicator.GetComponent<SpriteRenderer>().sprite = shieldNoText;
    text.gameObject.SetActive(true);
    decreasing = true;
  }
}
